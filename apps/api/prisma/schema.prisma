generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  image                  String?
  name                   String
  username               String    @unique
  email                  String    @unique
  emailVerified          Boolean   @default(false)
  emailVerificationToken String?
  emailVerifiedAt        DateTime?
  password               String
  refreshToken           String?
  role                   UserRole  @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  image       String
  labelText   String

  colors   Color[]
  sizes    Size[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  hex  String @unique

  products Product[]

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Size {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  value String @unique

  products Product[]

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Int
  images      String[]
  isArchived  Boolean  @default(false)
  isFeatured  Boolean  @default(false)

  colorId    String   @db.ObjectId
  color      Color    @relation(fields: [colorId], references: [id])
  sizeId     String   @db.ObjectId
  size       Size     @relation(fields: [sizeId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])
}
